@model HackToYourFuture.ViewModels.IndexViewModel


@using (Html.BeginForm("NewPlace", "Home"))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <div class="well">
            <input type="text" id="searchPlace" /><input type="submit" value="Add" class="btn btn-default" />
            @Html.HiddenFor(model => model.NewPlace.Longitude, new { @class = "form-control", @id = "newLongitude" })
            @Html.HiddenFor(model => model.NewPlace.Latitude, new { @class = "form-control", @id = "newLatitude" })
            @Html.HiddenFor(model => model.NewPlace.PlaceName, new { @class = "form-control", @id = "newPlaceName" })

            <div id="commentDiv">
                <span id="commentTitle"></span><br>
                @Html.TextBoxFor(x => x.NewComment.Text)
            </div>
        </div>
    </div>

}


<div class="list-group col-md-3" id="resultlist" style="clear: both">
    <div class="list-group-item">
        <h3 class="text-warning">
            Previous Places
        </h3>
    </div>

    @foreach (var place in Model.Places)
    {
        <a class="list-group-item" data-toggle="collapse" href="#@place.PlaceID" aria-expanded="false" aria-controls="collapseExample">
            @place.PlaceName
        </a>

    <div class="collapse" id="@place.PlaceID">
        <div class="well">

        </div>
    </div>



    }

</div>    

<div class="well" id="commentForm">

@using (Html.BeginForm("NewComment", "Home"))
{
    @Html.AntiForgeryToken()

    <div class="form-inline">
        <div class="well" id="something">
            @Html.TextBoxFor(x=> x.NewComment.Text)
            <input type="submit" value="Add" class="btn btn-default" />
            @Html.HiddenFor(model => model.NewComment.PlaceID, new { @class = "form-control", @id = "newPlaceID" })
            <div id="commentDiv">
        </div>
    </div>
    </div>
}

</div>

<div id="map-canvas" class="col-md-9" style="height: 500px"></div>

@section scripts {

    <script src="https://maps.googleapis.com/maps/api/js?v=3.exp&signed_in=true&libraries=places"></script>

    <script>
        $(document).ready(function () {
            // Ininitalise Variables
        var flightPlanCoordinates = new Array();
        var places = new Array();
        var mapmarkers = {};
        @foreach(var place in Model.Places)
        {
            @:places.push({name: "@place.PlaceName", id: @place.PlaceID, latitude: @place.Latitude, longitude: @place.Longitude});       
        }

            var infowindow = new google.maps.InfoWindow({
                content: "",
                maxWidth: 375
            });
        var map;
        $("#commentDiv").hide();
        var autocomplete;

        $("#commentForm").hide();

        $(".list-group-item").on("click",function(){
        
          

            var itemInt = $(this).attr("href");
            var realid = itemInt.substring(1);
            setInfoWindows(mapmarkers[realid]);
            $("#newPlaceID").val(itemInt);

            $("#commentForm").appendTo(itemInt + " .well");
            $("#commentForm").show();
        });


        function initialize() {
            console.log("initialize called");
            var mapOptions = {
                center: { lat: -37.814, lng: 144.953 },
                zoom: 12
            };
            
            map = new google.maps.Map(document.getElementById('map-canvas'),
                mapOptions);

            var input = document.getElementById("searchPlace");

            autocomplete = new google.maps.places.Autocomplete(input);
            autocomplete.bindTo('bounds', map);

            google.maps.event.addListener(autocomplete, 'place_changed', function () {

                var place = autocomplete.getPlace();

                $("#commentTitle").html("Comments for - " + place.name);
                $("#commentDiv").show();
                $("#newPlaceName").attr("value", place.name);
                $("#newLatitude").attr("value", place.geometry.location.k);
                $("#newLongitude").attr("value", place.geometry.location.D);


            });
         
            
      
          
            for (var place in places)
            {
                var newplace = places[place];
               // flightPlanCoordinates.push(new google.maps.LatLng(newplace.latitude, newplace.longitude));
                returnComments(newplace);

              

            }

            var lineSymbol = {
                path: google.maps.SymbolPath.FORWARD_CLOSED_ARROW
            };

            var flightPath = new google.maps.Polyline({
                path: flightPlanCoordinates,
                geodesic: true,
                strokeColor: '#FF0000',
                strokeOpacity: 1.0,
                strokeWeight: 2
            });

            flightPath.setMap(map);


        }



        $.getJSON("/Home/CalculateGoogle", null, function (data) {
                data = JSON.parse(data);
                for (var place in data) {
                    var latitude = parseFloat(data[place].Latitude);
                    var longitude = parseFloat(data[place].Longitude);
                    console.log(latitude);
                    flightPlanCoordinates.push(new google.maps.LatLng(latitude, longitude));

                }
                initialize();
                google.maps.event.addDomListener(window, 'load', initialize);

            });

            

 

        function returnComments(place) {

            $.getJSON("/Home/GetComments/?placeId="+place.id, null, function (data) {
                // console.log("in getjson" + place);
                data = JSON.parse(data);
                for (var comment in data) {
                    var dateString = data[comment].DateTime.match(/\d+/)[0];
                    dateString = Math.round(parseInt(dateString));

                    var date = new Date(dateString);
                    var prettyDate = date.getDate() + "/" + (date.getMonth()+1) + "/" + date.getFullYear();
                    $("#" + data[comment].PlaceID + " .well").append(data[comment].Text + " - " + prettyDate + "<br />"  );
               


                }
                
                buildMarker(place.longitude, place.latitude, place.name, place.id);
                   
                    

            });


        }
       

        function setInfoWindows(marker) {
            var contentString = '<table>'+
            '<tr><td colspan="2"><h4>'+marker.title+'</tr>'+
            '<tr><td style="vertical-align: top">'+marker.comments+'</td></tr>'+
            '</table>';

            infowindow.setContent(contentString);
            infowindow.open(map,marker);

        }

        // Builds the marker
        function buildMarker(longitude, latitude, name, id) {
            var myLatlng = new google.maps.LatLng(latitude, longitude);
           // console.log(id);
            var comments = $("#" + id + " .well").html();
            // console.log(comments);
            var marker = new google.maps.Marker({
                position: myLatlng,
                map: map,
                title: name,
                comments: comments

            });
            mapmarkers[id] = marker;
            google.maps.event.addListener(marker, 'click', function() {

                setInfoWindows(this);


            });

        }
    });
    </script>
}
